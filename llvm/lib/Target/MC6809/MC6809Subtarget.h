//===-- MC6809Subtarget.h - Define Subtarget for the MC6809 -----------*- C++ -*-===//
//
// Part of LLVM-MC6809, under the Apache License v2.0 with LLVM Exceptions.
// See https://llvm.org/LICENSE.txt for license information.
// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
//
//===----------------------------------------------------------------------===//
//
// This file declares the MC6809 specific subclass of TargetSubtargetInfo.
//
//===----------------------------------------------------------------------===//

#ifndef LLVM_MC6809_SUBTARGET_H
#define LLVM_MC6809_SUBTARGET_H

#include "llvm/CodeGen/GlobalISel/InlineAsmLowering.h"
#include "llvm/CodeGen/GlobalISel/InstructionSelector.h"
#include "llvm/CodeGen/GlobalISel/Utils.h"
#include "llvm/CodeGen/Register.h"
#include "llvm/CodeGen/TargetSubtargetInfo.h"
#include "llvm/IR/DataLayout.h"
#include "llvm/Target/TargetMachine.h"

#include "GISel/MC6809LegalizerInfo.h"
#include "GISel/MC6809CallLowering.h"
#include "GISel/MC6809RegisterBankInfo.h"
#include "MC6809FrameLowering.h"
#include "MC6809ISelLowering.h"
#include "MC6809InstrInfo.h"
#include "MC6809RegisterInfo.h"

#define GET_SUBTARGETINFO_HEADER
#include "MC6809GenSubtargetInfo.inc"

namespace llvm {

class MC6809TargetMachine;

/// A specific MC6809 target MCU.
class MC6809Subtarget : public MC6809GenSubtargetInfo {
public:
  MC6809Subtarget(const Triple &TT, const std::string &CPU, const std::string &FS,
               const MC6809TargetMachine &TM);

  /// Gets the e_flags value of an ELF object file.
  unsigned getEFlags() const {
    assert(EFlags != 0 &&
           "every MC6809 subtarget must set at least one architecture feature");
    return EFlags;
  }

  const MC6809FrameLowering *getFrameLowering() const override {
    return &FrameLowering;
  }

  const MC6809InstrInfo *getInstrInfo() const override { return &InstrInfo; }

  const MC6809RegisterInfo *getRegisterInfo() const override { return &RegInfo; }

  const MC6809TargetLowering *getTargetLowering() const override {
    return &TLInfo;
  }

  const CallLowering *getCallLowering() const override {
    return &CallLoweringInfo;
  }

  const LegalizerInfo *getLegalizerInfo() const override { return &Legalizer; }

  const RegisterBankInfo *getRegBankInfo() const override {
    return &RegBankInfo;
  }

  InstructionSelector *getInstructionSelector() const override {
    return InstSelector.get();
  }

  const InlineAsmLowering *getInlineAsmLowering() const override {
    return &InlineAsmLoweringInfo;
  }

  bool enableMachineScheduler() const override { return true; }
  bool enableSubRegLiveness() const override { return true; }

  void overrideSchedPolicy(MachineSchedPolicy &Policy,
                           unsigned NumRegionInstrs) const override;

  // Subtarget feature getters.
  // See MC6809.td for details.
  bool hasTinyEncoding() const { return HasTinyEncoding; }

  MC6809Subtarget &initializeSubtargetDependencies(StringRef CPU, StringRef FS,
                                                const TargetMachine &TM);

  /// Parses a subtarget feature string, setting appropriate options.
  /// \note Definition of function is auto generated by `tblgen`.
  void ParseSubtargetFeatures(StringRef CPU, StringRef TuneCPU, StringRef FS);

  bool isHD6309() const { return Has6309Insns; }

private:
  /// The ELF e_flags architecture features.
  unsigned EFlags = 0;

  // Subtarget feature settings
  // See MC6809.td for details.
  bool HasTinyEncoding = false;

  bool Has6309Insns = false;

  bool LongRegisterNames = false;

  // Dummy member, used by FeatureSet's. We cannot have a SubtargetFeature with
  // no variable, so we instead bind pseudo features to this variable.
  bool FeatureSetDummy = false;

  MC6809InstrInfo InstrInfo;
  MC6809RegisterInfo RegInfo;
  MC6809FrameLowering FrameLowering;
  MC6809TargetLowering TLInfo;
  MC6809CallLowering CallLoweringInfo;
  MC6809LegalizerInfo Legalizer;
  MC6809RegisterBankInfo RegBankInfo;
  std::unique_ptr<InstructionSelector> InstSelector;
  InlineAsmLowering InlineAsmLoweringInfo;
};

} // end namespace llvm

#endif // LLVM_MC6809_SUBTARGET_H
