# NOTE: Assertions have been autogenerated by utils/update_mir_test_checks.py
# RUN: llc -global-isel -global-isel-abort=1 -mtriple=mc6809 -run-pass=mc6809-combiner -verify-machineinstrs -o - %s | FileCheck %s --check-prefixes=CHECK-MC6809
# RUN: llc -global-isel -global-isel-abort=1 -mtriple=mc6809 -mcpu=hd6309 -run-pass=mc6809-combiner -verify-machineinstrs -o - %s | FileCheck %s --check-prefixes=CHECK-HD6309
---
name: fold_global_offset
body:             |
  bb.1.entry:
    ; CHECK-LABEL: name: fold_global_offset
    ; CHECK: [[GV:%[0-9]+]]:_(p0) = G_GLOBAL_VALUE @fold_global_offset + 42
    ; CHECK-NEXT: $ix = COPY [[GV]](p0)
    ; CHECK-NEXT: ReturnImplicit implicit $ix
    ; CHECK-MC6809-LABEL: name: fold_global_offset
    ; CHECK-MC6809: [[GV:%[0-9]+]]:_(p0) = G_GLOBAL_VALUE @fold_global_offset + 42
    ; CHECK-MC6809-NEXT: $ix = COPY [[GV]](p0)
    ; CHECK-MC6809-NEXT: ReturnImplicit implicit $ix
    ; CHECK-HD6309-LABEL: name: fold_global_offset
    ; CHECK-HD6309: [[GV:%[0-9]+]]:_(p0) = G_GLOBAL_VALUE @fold_global_offset + 42
    ; CHECK-HD6309-NEXT: $ix = COPY [[GV]](p0)
    ; CHECK-HD6309-NEXT: ReturnImplicit implicit $ix
    %1:_(p0) = G_GLOBAL_VALUE @fold_global_offset
    %2:_(s16) = G_CONSTANT i16 42
    %0:_(p0) = G_PTR_ADD %1, %2(s16)
    $ix = COPY %0(p0)
    ReturnImplicit implicit $ix
...
---
name: extract_low_bit_using_earlier_shift_8
body: |
  bb.0.entry:
    ; CHECK-LABEL: name: extract_low_bit_using_earlier_shift_8
    ; CHECK: [[COPY:%[0-9]+]]:_(s8) = COPY $ab
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s8) = G_CONSTANT i8 1
    ; CHECK-NEXT: [[LSHR:%[0-9]+]]:_(s8) = G_LSHR [[COPY]], [[C]](s8)
    ; CHECK-NEXT: [[TRUNC:%[0-9]+]]:_(s1) = G_TRUNC [[COPY]](s8)
    ; CHECK-NEXT: ReturnImplicit implicit [[LSHR]](s8), implicit [[TRUNC]](s1)
    ; CHECK-MC6809-LABEL: name: extract_low_bit_using_earlier_shift_8
    ; CHECK-MC6809: [[COPY:%[0-9]+]]:_(s8) = COPY $ab
    ; CHECK-MC6809-NEXT: [[C:%[0-9]+]]:_(s8) = G_CONSTANT i8 1
    ; CHECK-MC6809-NEXT: [[LSHR:%[0-9]+]]:_(s8) = G_LSHR [[COPY]], [[C]](s8)
    ; CHECK-MC6809-NEXT: [[TRUNC:%[0-9]+]]:_(s1) = G_TRUNC [[COPY]](s8)
    ; CHECK-MC6809-NEXT: ReturnImplicit implicit [[LSHR]](s8), implicit [[TRUNC]](s1)
    ; CHECK-HD6309-LABEL: name: extract_low_bit_using_earlier_shift_8
    ; CHECK-HD6309: [[COPY:%[0-9]+]]:_(s8) = COPY $ab
    ; CHECK-HD6309-NEXT: [[C:%[0-9]+]]:_(s8) = G_CONSTANT i8 1
    ; CHECK-HD6309-NEXT: [[LSHR:%[0-9]+]]:_(s8) = G_LSHR [[COPY]], [[C]](s8)
    ; CHECK-HD6309-NEXT: [[TRUNC:%[0-9]+]]:_(s1) = G_TRUNC [[COPY]](s8)
    ; CHECK-HD6309-NEXT: ReturnImplicit implicit [[LSHR]](s8), implicit [[TRUNC]](s1)
    %0:_(s8) = COPY $ab
    %1:_(s8) = G_CONSTANT i8 1
    %2:_(s8) = G_LSHR %0, %1
    %3:_(s1) = G_TRUNC %0
    ReturnImplicit implicit %2, implicit %3
...
---
name: extract_low_bit_using_earlier_shift_16
body: |
  bb.0.entry:
    ; CHECK-LABEL: name: extract_low_bit_using_earlier_shift_16
    ; CHECK: [[COPY:%[0-9]+]]:_(s16) = COPY $ad
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s16) = G_CONSTANT i16 1
    ; CHECK-NEXT: [[LSHR:%[0-9]+]]:_(s16) = G_LSHR [[COPY]], [[C]](s16)
    ; CHECK-NEXT: [[TRUNC:%[0-9]+]]:_(s1) = G_TRUNC [[COPY]](s16)
    ; CHECK-NEXT: ReturnImplicit implicit [[LSHR]](s16), implicit [[TRUNC]](s1)
    ; CHECK-MC6809-LABEL: name: extract_low_bit_using_earlier_shift_16
    ; CHECK-MC6809: [[COPY:%[0-9]+]]:_(s16) = COPY $ad
    ; CHECK-MC6809-NEXT: [[C:%[0-9]+]]:_(s16) = G_CONSTANT i16 1
    ; CHECK-MC6809-NEXT: [[LSHR:%[0-9]+]]:_(s16) = G_LSHR [[COPY]], [[C]](s16)
    ; CHECK-MC6809-NEXT: [[TRUNC:%[0-9]+]]:_(s1) = G_TRUNC [[COPY]](s16)
    ; CHECK-MC6809-NEXT: ReturnImplicit implicit [[LSHR]](s16), implicit [[TRUNC]](s1)
    ; CHECK-HD6309-LABEL: name: extract_low_bit_using_earlier_shift_16
    ; CHECK-HD6309: [[COPY:%[0-9]+]]:_(s16) = COPY $ad
    ; CHECK-HD6309-NEXT: [[C:%[0-9]+]]:_(s16) = G_CONSTANT i16 1
    ; CHECK-HD6309-NEXT: [[LSHR:%[0-9]+]]:_(s16) = G_LSHR [[COPY]], [[C]](s16)
    ; CHECK-HD6309-NEXT: [[TRUNC:%[0-9]+]]:_(s1) = G_TRUNC [[COPY]](s16)
    ; CHECK-HD6309-NEXT: ReturnImplicit implicit [[LSHR]](s16), implicit [[TRUNC]](s1)
    %0:_(s16) = COPY $ad
    %1:_(s16) = G_CONSTANT i16 1
    %2:_(s16) = G_LSHR %0, %1
    %3:_(s1) = G_TRUNC %0
    ReturnImplicit implicit %2, implicit %3
...
---
name: extract_low_bit_using_later_shift
body: |
  bb.0.entry:
    ; CHECK-LABEL: name: extract_low_bit_using_later_shift
    ; CHECK: [[COPY:%[0-9]+]]:_(s8) = COPY $ab
    ; CHECK-NEXT: [[TRUNC:%[0-9]+]]:_(s1) = G_TRUNC [[COPY]](s8)
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s8) = G_CONSTANT i8 1
    ; CHECK-NEXT: [[LSHR:%[0-9]+]]:_(s8) = G_LSHR [[COPY]], [[C]](s8)
    ; CHECK-NEXT: ReturnImplicit implicit [[TRUNC]](s1), implicit [[LSHR]](s8)
    ; CHECK-MC6809-LABEL: name: extract_low_bit_using_later_shift
    ; CHECK-MC6809: [[COPY:%[0-9]+]]:_(s8) = COPY $ab
    ; CHECK-MC6809-NEXT: [[TRUNC:%[0-9]+]]:_(s1) = G_TRUNC [[COPY]](s8)
    ; CHECK-MC6809-NEXT: [[C:%[0-9]+]]:_(s8) = G_CONSTANT i8 1
    ; CHECK-MC6809-NEXT: [[LSHR:%[0-9]+]]:_(s8) = G_LSHR [[COPY]], [[C]](s8)
    ; CHECK-MC6809-NEXT: ReturnImplicit implicit [[TRUNC]](s1), implicit [[LSHR]](s8)
    ; CHECK-HD6309-LABEL: name: extract_low_bit_using_later_shift
    ; CHECK-HD6309: [[COPY:%[0-9]+]]:_(s8) = COPY $ab
    ; CHECK-HD6309-NEXT: [[TRUNC:%[0-9]+]]:_(s1) = G_TRUNC [[COPY]](s8)
    ; CHECK-HD6309-NEXT: [[C:%[0-9]+]]:_(s8) = G_CONSTANT i8 1
    ; CHECK-HD6309-NEXT: [[LSHR:%[0-9]+]]:_(s8) = G_LSHR [[COPY]], [[C]](s8)
    ; CHECK-HD6309-NEXT: ReturnImplicit implicit [[TRUNC]](s1), implicit [[LSHR]](s8)
    %0:_(s8) = COPY $ab
    %1:_(s1) = G_TRUNC %0
    %2:_(s8) = G_CONSTANT i8 1
    %3:_(s8) = G_LSHR %0, %2
    ReturnImplicit implicit %1, implicit %3
...
---
name: extract_low_bit_and
body: |
  bb.0.entry:
    ; CHECK-LABEL: name: extract_low_bit_and
    ; CHECK: [[COPY:%[0-9]+]]:_(s8) = COPY $ab
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s8) = G_CONSTANT i8 1
    ; CHECK-NEXT: [[LSHR:%[0-9]+]]:_(s8) = G_LSHR [[COPY]], [[C]](s8)
    ; CHECK-NEXT: [[AND:%[0-9]+]]:_(s8) = G_AND [[COPY]], [[C]]
    ; CHECK-NEXT: [[TRUNC:%[0-9]+]]:_(s1) = G_TRUNC [[AND]](s8)
    ; CHECK-NEXT: ReturnImplicit implicit [[LSHR]](s8), implicit [[TRUNC]](s1)
    ; CHECK-MC6809-LABEL: name: extract_low_bit_and
    ; CHECK-MC6809: [[COPY:%[0-9]+]]:_(s8) = COPY $ab
    ; CHECK-MC6809-NEXT: [[C:%[0-9]+]]:_(s8) = G_CONSTANT i8 1
    ; CHECK-MC6809-NEXT: [[LSHR:%[0-9]+]]:_(s8) = G_LSHR [[COPY]], [[C]](s8)
    ; CHECK-MC6809-NEXT: [[AND:%[0-9]+]]:_(s8) = G_AND [[COPY]], [[C]]
    ; CHECK-MC6809-NEXT: [[TRUNC:%[0-9]+]]:_(s1) = G_TRUNC [[AND]](s8)
    ; CHECK-MC6809-NEXT: ReturnImplicit implicit [[LSHR]](s8), implicit [[TRUNC]](s1)
    ; CHECK-HD6309-LABEL: name: extract_low_bit_and
    ; CHECK-HD6309: [[COPY:%[0-9]+]]:_(s8) = COPY $ab
    ; CHECK-HD6309-NEXT: [[C:%[0-9]+]]:_(s8) = G_CONSTANT i8 1
    ; CHECK-HD6309-NEXT: [[LSHR:%[0-9]+]]:_(s8) = G_LSHR [[COPY]], [[C]](s8)
    ; CHECK-HD6309-NEXT: [[AND:%[0-9]+]]:_(s8) = G_AND [[COPY]], [[C]]
    ; CHECK-HD6309-NEXT: [[TRUNC:%[0-9]+]]:_(s1) = G_TRUNC [[AND]](s8)
    ; CHECK-HD6309-NEXT: ReturnImplicit implicit [[LSHR]](s8), implicit [[TRUNC]](s1)
    %0:_(s8) = COPY $ab
    %1:_(s8) = G_CONSTANT i8 1
    %2:_(s8) = G_LSHR %0, %1
    %4:_(s8) = G_AND %0, %1
    %5:_(s8) = G_CONSTANT i8 0
    %6:_(s1) = G_ICMP intpred(ne), %4, %5
    ReturnImplicit implicit %2, implicit %6
...

---
name: extract_not_low_bit_and_using_earlier_shift
body: |
  bb.0.entry:
    ; CHECK-LABEL: name: extract_not_low_bit_and_using_earlier_shift
    ; CHECK: [[COPY:%[0-9]+]]:_(s8) = COPY $ab
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s8) = G_CONSTANT i8 1
    ; CHECK-NEXT: [[LSHR:%[0-9]+]]:_(s8) = G_LSHR [[COPY]], [[C]](s8)
    ; CHECK-NEXT: [[AND:%[0-9]+]]:_(s8) = G_AND [[COPY]], [[C]]
    ; CHECK-NEXT: [[C1:%[0-9]+]]:_(s8) = G_CONSTANT i8 0
    ; CHECK-NEXT: [[ICMP:%[0-9]+]]:_(s1) = G_ICMP intpred(eq), [[AND]](s8), [[C1]]
    ; CHECK-NEXT: ReturnImplicit implicit [[LSHR]](s8), implicit [[ICMP]](s1)
    ; CHECK-MC6809-LABEL: name: extract_not_low_bit_and_using_earlier_shift
    ; CHECK-MC6809: [[COPY:%[0-9]+]]:_(s8) = COPY $ab
    ; CHECK-MC6809-NEXT: [[C:%[0-9]+]]:_(s8) = G_CONSTANT i8 1
    ; CHECK-MC6809-NEXT: [[LSHR:%[0-9]+]]:_(s8) = G_LSHR [[COPY]], [[C]](s8)
    ; CHECK-MC6809-NEXT: [[AND:%[0-9]+]]:_(s8) = G_AND [[COPY]], [[C]]
    ; CHECK-MC6809-NEXT: [[C1:%[0-9]+]]:_(s8) = G_CONSTANT i8 0
    ; CHECK-MC6809-NEXT: [[ICMP:%[0-9]+]]:_(s1) = G_ICMP intpred(eq), [[AND]](s8), [[C1]]
    ; CHECK-MC6809-NEXT: ReturnImplicit implicit [[LSHR]](s8), implicit [[ICMP]](s1)
    ; CHECK-HD6309-LABEL: name: extract_not_low_bit_and_using_earlier_shift
    ; CHECK-HD6309: [[COPY:%[0-9]+]]:_(s8) = COPY $ab
    ; CHECK-HD6309-NEXT: [[C:%[0-9]+]]:_(s8) = G_CONSTANT i8 1
    ; CHECK-HD6309-NEXT: [[LSHR:%[0-9]+]]:_(s8) = G_LSHR [[COPY]], [[C]](s8)
    ; CHECK-HD6309-NEXT: [[AND:%[0-9]+]]:_(s8) = G_AND [[COPY]], [[C]]
    ; CHECK-HD6309-NEXT: [[C1:%[0-9]+]]:_(s8) = G_CONSTANT i8 0
    ; CHECK-HD6309-NEXT: [[ICMP:%[0-9]+]]:_(s1) = G_ICMP intpred(eq), [[AND]](s8), [[C1]]
    ; CHECK-HD6309-NEXT: ReturnImplicit implicit [[LSHR]](s8), implicit [[ICMP]](s1)
    %0:_(s8) = COPY $ab
    %1:_(s8) = G_CONSTANT i8 1
    %2:_(s8) = G_LSHR %0, %1
    %4:_(s8) = G_AND %0, %1
    %5:_(s8) = G_CONSTANT i8 0
    %6:_(s1) = G_ICMP intpred(eq), %4, %5
    ReturnImplicit implicit %2, implicit %6
...
---
name: extract_not_low_bit_and_using_later_shift
body: |
  bb.0.entry:
    ; CHECK-LABEL: name: extract_not_low_bit_and_using_later_shift
    ; CHECK: [[COPY:%[0-9]+]]:_(s8) = COPY $ab
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s8) = G_CONSTANT i8 1
    ; CHECK-NEXT: [[AND:%[0-9]+]]:_(s8) = G_AND [[COPY]], [[C]]
    ; CHECK-NEXT: [[C1:%[0-9]+]]:_(s8) = G_CONSTANT i8 0
    ; CHECK-NEXT: [[ICMP:%[0-9]+]]:_(s1) = G_ICMP intpred(eq), [[AND]](s8), [[C1]]
    ; CHECK-NEXT: [[LSHR:%[0-9]+]]:_(s8) = G_LSHR [[COPY]], [[C]](s8)
    ; CHECK-NEXT: ReturnImplicit implicit [[ICMP]](s1), implicit [[LSHR]](s8)
    ; CHECK-MC6809-LABEL: name: extract_not_low_bit_and_using_later_shift
    ; CHECK-MC6809: [[COPY:%[0-9]+]]:_(s8) = COPY $ab
    ; CHECK-MC6809-NEXT: [[C:%[0-9]+]]:_(s8) = G_CONSTANT i8 1
    ; CHECK-MC6809-NEXT: [[AND:%[0-9]+]]:_(s8) = G_AND [[COPY]], [[C]]
    ; CHECK-MC6809-NEXT: [[C1:%[0-9]+]]:_(s8) = G_CONSTANT i8 0
    ; CHECK-MC6809-NEXT: [[ICMP:%[0-9]+]]:_(s1) = G_ICMP intpred(eq), [[AND]](s8), [[C1]]
    ; CHECK-MC6809-NEXT: [[LSHR:%[0-9]+]]:_(s8) = G_LSHR [[COPY]], [[C]](s8)
    ; CHECK-MC6809-NEXT: ReturnImplicit implicit [[ICMP]](s1), implicit [[LSHR]](s8)
    ; CHECK-HD6309-LABEL: name: extract_not_low_bit_and_using_later_shift
    ; CHECK-HD6309: [[COPY:%[0-9]+]]:_(s8) = COPY $ab
    ; CHECK-HD6309-NEXT: [[C:%[0-9]+]]:_(s8) = G_CONSTANT i8 1
    ; CHECK-HD6309-NEXT: [[AND:%[0-9]+]]:_(s8) = G_AND [[COPY]], [[C]]
    ; CHECK-HD6309-NEXT: [[C1:%[0-9]+]]:_(s8) = G_CONSTANT i8 0
    ; CHECK-HD6309-NEXT: [[ICMP:%[0-9]+]]:_(s1) = G_ICMP intpred(eq), [[AND]](s8), [[C1]]
    ; CHECK-HD6309-NEXT: [[LSHR:%[0-9]+]]:_(s8) = G_LSHR [[COPY]], [[C]](s8)
    ; CHECK-HD6309-NEXT: ReturnImplicit implicit [[ICMP]](s1), implicit [[LSHR]](s8)
    %0:_(s8) = COPY $ab
    %1:_(s8) = G_CONSTANT i8 1
    %2:_(s8) = G_AND %0, %1
    %3:_(s8) = G_CONSTANT i8 0
    %4:_(s1) = G_ICMP intpred(eq), %2, %3
    %5:_(s8) = G_LSHR %0, %1
    ReturnImplicit implicit %4, implicit %5
...
---
name: extract_low_bits
body: |
  bb.0.entry:
    ; CHECK-LABEL: name: extract_low_bits
    ; CHECK: [[COPY:%[0-9]+]]:_(s8) = COPY $ab
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s8) = G_CONSTANT i8 1
    ; CHECK-NEXT: [[LSHR:%[0-9]+]]:_(s8) = G_LSHR [[COPY]], [[C]](s8)
    ; CHECK-NEXT: [[TRUNC:%[0-9]+]]:_(s2) = G_TRUNC [[COPY]](s8)
    ; CHECK-NEXT: ReturnImplicit implicit [[LSHR]](s8), implicit [[TRUNC]](s2)
    ; CHECK-MC6809-LABEL: name: extract_low_bits
    ; CHECK-MC6809: [[COPY:%[0-9]+]]:_(s8) = COPY $ab
    ; CHECK-MC6809-NEXT: [[C:%[0-9]+]]:_(s8) = G_CONSTANT i8 1
    ; CHECK-MC6809-NEXT: [[LSHR:%[0-9]+]]:_(s8) = G_LSHR [[COPY]], [[C]](s8)
    ; CHECK-MC6809-NEXT: [[TRUNC:%[0-9]+]]:_(s2) = G_TRUNC [[COPY]](s8)
    ; CHECK-MC6809-NEXT: ReturnImplicit implicit [[LSHR]](s8), implicit [[TRUNC]](s2)
    ; CHECK-HD6309-LABEL: name: extract_low_bits
    ; CHECK-HD6309: [[COPY:%[0-9]+]]:_(s8) = COPY $ab
    ; CHECK-HD6309-NEXT: [[C:%[0-9]+]]:_(s8) = G_CONSTANT i8 1
    ; CHECK-HD6309-NEXT: [[LSHR:%[0-9]+]]:_(s8) = G_LSHR [[COPY]], [[C]](s8)
    ; CHECK-HD6309-NEXT: [[TRUNC:%[0-9]+]]:_(s2) = G_TRUNC [[COPY]](s8)
    ; CHECK-HD6309-NEXT: ReturnImplicit implicit [[LSHR]](s8), implicit [[TRUNC]](s2)
    %0:_(s8) = COPY $ab
    %1:_(s8) = G_CONSTANT i8 1
    %2:_(s8) = G_LSHR %0, %1
    %3:_(s2) = G_TRUNC %0
    ReturnImplicit implicit %2, implicit %3
...
